I"RP<h2 id="原型链基础">原型链基础</h2>
<p>看了《javascript高级程序设计》关于对象继承方面的内容，对原型链有了一定理解：</p>
<ul>
  <li>构造函数也是函数，函数都是对象，构造函数作为一个函数类型的对象，有一个<code class="highlighter-rouge">prototype</code>属性，它引用一个对象，我们称其为<strong>构造函数的原型对象</strong>；</li>
  <li>构造函数的原型对象中有一个 <code class="highlighter-rouge">constructor</code>属性，它反过来引用构造函数；</li>
  <li>如果用构造函数创建一个实例对象，那么这个实例对象会和构造函数的原型对象产生联系（而不是构造函数）；具体来说，这个实例内部有一个<code class="highlighter-rouge">[[Prototype]]</code>属性，它指向构造函数的原型对象。（为避免歧义，我们之后把这个原型对象称作构造函数的原型对象、实例的<strong>原型</strong>）</li>
  <li><code class="highlighter-rouge">[[Prototype]]</code>属性不能在实例中直接访问，但可以借助一个<code class="highlighter-rouge">es5</code>方法<code class="highlighter-rouge">Object.getPrototypeof()</code>；</li>
  <li>如果一个实例的原型本身又是另一种类型的实例，那么这样循环迭代，一个实例的原型就可以一层层上推，形成原型链，最终那个原型是一个<code class="highlighter-rouge">Object</code>对象。</li>
</ul>

<h2 id="问题">问题</h2>
<ul>
  <li>
    <p>如果我有个对象，能不能把这个对象的原型链分析展现出来呢，特别地，函数作为对象自身的原型链是怎样的呢？（我们知道函数定义也可以通过调用构造函数<code class="highlighter-rouge">Function</code>实现，这个构造函数又是怎么和 最终的<code class="highlighter-rouge">Object</code>对象联系的呢？）</p>
  </li>
  <li>
    <p>上面提到的方法<code class="highlighter-rouge">Object.getPrototypeof()</code>在什么地方，类似的还如<code class="highlighter-rouge">Array.isArray()</code>显然它不在普通对象的原型链中，否则通过继承<code class="highlighter-rouge">Object</code>，对象实例、数组实例本身就应该能用相应的方法。</p>
  </li>
</ul>

<h2 id="问题一编程探索">问题一编程探索</h2>
<h3 id="程序编写">程序编写</h3>
<p>为理解第一个问题，首先全局环境下定义一个简单函数<code class="highlighter-rouge">baseFunc</code>，然后建立另一函数<code class="highlighter-rouge">testProto</code>，它以传入的参数<code class="highlighter-rouge">baseObj</code>对象为起点，搜索该对象相关的的原型、函数的原型对象、构造函数，把这些对象搜集放在一个数组中，并在调试窗口输出对象间的关系。</p>

<p>以下是<code class="highlighter-rouge">testProto</code>函数的思路：</p>
<ol>
  <li>
    <p>首先将参数对象初始化为数组的第一个元素，然后将其传入内部递归闭包，闭包中先判断对象<code class="highlighter-rouge">__proto__</code>(原型，受chrome,safari,firefox支持)、<code class="highlighter-rouge">prototype</code>(构造函数的原型对象)、<code class="highlighter-rouge">constructor</code>三个属性是否存在，把存在的属性的值（是一个对象）依次放入数组，然后以此将存在的属性值作为参数递归地传入闭包中。</p>
  </li>
  <li>
    <p>需要注意的是将存在的属性放入数组时，要检查它是否因为之前同时被另一个对象的三个属性之一引用而已经被放入过数组了；递归调用前也要检查它们之前是否已经被调用过（如果已经被调用过却再次调用，那么可能陷入无限递归的死循环）。</p>
  </li>
</ol>

<p>下面是代码</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
	<span class="nx">testProto</span><span class="p">(</span><span class="nx">baseFunc</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">baseFunc</span><span class="p">(){}</span>

<span class="kd">function</span> <span class="nx">testProto</span><span class="p">(</span><span class="nx">baseObj</span><span class="p">){</span>
<span class="c1">//以baseObj对象为起点，搜索原型、函数的原型对象、构造函数</span>
	<span class="kd">var</span> <span class="nx">objs</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(),</span>	<span class="c1">//存储相关对象</span>
		<span class="nx">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>	<span class="c1">//objs中存储的对象最大索引</span>
	
	<span class="nx">objs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nx">baseObj</span><span class="p">;</span>	

	<span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">max</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">){</span>
			<span class="c1">//避免无穷递归(如果真的沿着原型链可以无限走下去的话)</span>
			
			<span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">&amp;&amp;</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
				<span class="c1">//具有__proto__属性(obj的原型)，</span>
				<span class="c1">//并且该原型之前没有添加到数组里</span>
				<span class="c1">//(考虑到它可能同时作为其他对象的属性被引用着)</span>
				<span class="nx">objs</span><span class="p">[</span><span class="o">++</span><span class="nx">max</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">&amp;&amp;</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
				<span class="nx">objs</span><span class="p">[</span><span class="o">++</span><span class="nx">max</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">&amp;&amp;</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
				<span class="nx">objs</span><span class="p">[</span><span class="o">++</span><span class="nx">max</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span><span class="p">;</span>
			<span class="p">}</span>

			<span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> 
			<span class="o">&amp;&amp;</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)){</span>
				<span class="c1">//该属性存在，</span>
				<span class="c1">//其引用的对象已经被添加到数组里，</span>
				<span class="c1">//而且添加时间晚于父元素obj</span>
				<span class="c1">//(早于父元素是可能的，此时必定已经被处理过了)。</span>
				<span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">);</span>	
				<span class="c1">//递归地处理属性对象</span>
			<span class="p">}</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">prototype</span> 
			<span class="o">&amp;&amp;</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)){</span>
				<span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">obj</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> 
			<span class="o">&amp;&amp;</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)){</span>
				<span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span><span class="p">);</span>
			<span class="p">}</span>

		<span class="p">}</span>
	<span class="p">})(</span><span class="nx">objs</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

	<span class="c1">//给出各对象类型，如果是函数，给出函数名</span>
	<span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">max</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> is </span><span class="dl">"</span> <span class="o">+</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">objs</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> 
			<span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="p">((</span><span class="k">typeof</span> <span class="nx">objs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">function</span><span class="dl">"</span><span class="p">)?</span><span class="nx">objs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span><span class="p">:</span><span class="dl">""</span><span class="p">));</span>
	<span class="p">}</span>

	<span class="c1">//次序给出各个对象的原型、原型对象(如果这个对象是个函数)、constructor属性</span>
	<span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">max</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">==========</span><span class="dl">"</span><span class="p">);</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">objs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">__proto__</span><span class="p">){</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">__proto__:</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">objs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">__proto__</span><span class="p">));</span>
		<span class="p">}</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">objs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">prototype</span><span class="p">){</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">prototype:</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">objs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">prototype</span><span class="p">));</span>
		<span class="p">}</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">objs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="kd">constructor</span><span class="p">){</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">constructor:</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">objs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="kd">constructor</span><span class="p">));</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="c1">//部分核查程序的正确性：数组中没有出现对象被重复统计处理的情况</span>
	<span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">max</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">objs</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="nx">objs</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">===</span> <span class="nx">objs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">objs</span><span class="p">[</span><span class="nx">i</span><span class="p">])){</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
		<span class="p">}</span><span class="k">else</span><span class="p">{</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<h3 id="输出">输出</h3>
<p>程序在控制台的输出如下：
<img src="http://upload-images.jianshu.io/upload_images/6321648-a19718bc57db6784.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" />
前面几行首先以此输出数组中保存的相关对象，如果对象是函数，给给出相应的函数名称；然后依次给出各对象三个属性存在的属性的值在数组中的索引。</p>
<h3 id="结果整理分析">结果整理分析</h3>
<p>把以上程序在chrome浏览器中运行，利用控制台的输出，整理得到下面这张图：
<img src="http://upload-images.jianshu.io/upload_images/6321648-d4b95030bbed0986.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>
<ol>
  <li>图中0、1、3、5都是函数，2、4是对象。0就是我们定义的<code class="highlighter-rouge">baseFunc</code>函数，它的原型对象是2，它作为一个对象有原型1，对象1是一个函数，但是我们未能获得它的函数名，我们把它记为函数X，对象1的原型是对象4。</li>
  <li>对象3就是构造函数<code class="highlighter-rouge">Function</code>，对象5就是构造函数<code class="highlighter-rouge">Object</code>。</li>
  <li>图中所有对象的原型链走到顶端都是对象4，它就是被<code class="highlighter-rouge">ECMAScript</code>中所有对象继承的Object对象。</li>
  <li>图中的函数都继承自函数X（对象1），因此我们基本可以推论说函数就是一个X类型；</li>
  <li>由于constructor属性可能是继承的，所以图中的这个关系不一定很准确，实际上我在调试窗口中查找，对象0，1，5上都没有显式的<code class="highlighter-rouge">constructor</code>属性。</li>
</ol>

<h2 id="问题二的解答">问题二的解答</h2>
<p>在解决问题一的过程中，我发现可以在浏览器调试窗口下通过window对象和添加watch对象，然后一路追踪对象的原型、原型对象、<code class="highlighter-rouge">consctructor</code>等属性看到对象的原型链，然而这毕竟还是有点问题，层次太深以后就容易乱，特别是基本的那几个对象之间有着循环引用；另一个问题是两个对象都写作<code class="highlighter-rouge">Object</code>，我们没有把握判断它们是否真的就是一个对象，为此上面的编程还是有不少帮助的。</p>

<p>借助如上的调试手段和原型探索程序，我们可以很容易地在<code class="highlighter-rouge">window&gt;baseFunc&gt;__proto__(函数X)&gt;__proto__(基本对象Object)&gt;constrctor(构造函数Object)</code>中找到了<code class="highlighter-rouge">getPrototypeOf()</code>方法，它是构造函数<code class="highlighter-rouge">Object</code>的一个属性，所以写作<code class="highlighter-rouge">Object.getPrototypeOf()</code>(其实早该想到，只是这就被明确地证实了，这就好比构造函数<code class="highlighter-rouge">Object</code>作为函数具有<code class="highlighter-rouge">arguments</code>属性一样)，由于它不是基本对象<code class="highlighter-rouge">Object</code>的属性，所以没有被普通对象继承。</p>
:ET