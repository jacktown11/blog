I"rg<h1 id="section">编程相关</h1>
<h2 id="section-1">计算机基础</h2>
<h3 id="section-2">计算机中的位</h3>
<ul>
<li><code>CPU</code>位数，是从计算机硬件层面来看，指的是一个时钟周期内处理器同时寄存和处理的二进制位数，也就是字长，通常等于数据总线的宽度。</li>
<li>操作系统位数，是从计算机软件层面来看， 其概念是基于<code>CPU</code>的位数的，且操作系统的位数是依赖于指令集的位数的。</li>
<li>注意：按“字”寻址，说明是存储单元大小为字长的位数，按“字节”寻址，说明存储单元是一个字节的大小 。</li>
</ul>
<p>通常：</p>
<ul>
<li><code>CPU</code>位数 = <code>CPU</code>中寄存器的位数 = <code>CPU</code>一次并行处理的数据宽度 = 数据总线的宽度</li>
<li>操作系统位数 = 其所依赖的指令集位数 &lt;= <code>CPU</code>位数</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_27565063/article/details/53748879">CPU 位数、操作系统位数、计算机字长、C/C++基本数据类型长度</a></li>
<li><a href="https://blog.csdn.net/u012861978/article/details/51871315">关于 CPU 位数和操作系统位数</a></li>
</ul>
<h1 id="section-3">前端</h1>
<h2 id="vue">vue</h2>
<h3 id="section-4">大小写的推荐写法</h3>
<h4 id="section-5">单文件组件的文件名</h4>
<p>建议始终使用<code>PascalCase</code>或<code>kebab-case</code>，前者利于编辑器自动提示并于在<code>js</code>文件中对它的引用更一致，不过在某些大写不敏感的文件系统中可能出现问题。</p>
<h4 id="section-6">组件名称</h4>
<ul>
<li>在字符串模板/单文件组件模板中建议：<code>PascalCase</code>或<code>kebab-case</code></li>
<li>在<code>DOM</code>模板中使用：<code>kebab-case</code>（鉴于<code>html</code>大小写不敏感，这是必须的）</li>
<li>在<code>js</code>中建议：<code>PascalCase</code>
<ul>
<li>但是使用<code>Vue.component()</code>注册全局组件的话，建议<code>kebab-case</code>.(因为它们会在<code>js</code>中用得少，而<code>kebab-case</code>和<code>html</code>一致)</li>
</ul>
</li>
</ul>
<h4 id="section-7">属性名称</h4>
<ul>
<li><code>html</code>中建议<code>kebab-case</code></li>
<li><code>js</code>中建议<code>camelCase</code></li>
</ul>
<h4 id="section-8">事件名称</h4>
<p>始终使用<code>kebab-case</code>（注意：<code>vue</code>不会将<code>js</code>中其他形式事件名自动转换为<code>kebab-case</code>，因为它几乎不被作为标识符使用）</p>
<h4 id="section-9">个人小结（一种参考）</h4>
<ul>
<li><code>html</code>(<code>DOM template</code>、<code>string template</code>、<code>single file component template</code>): <code>kebab-case</code></li>
<li><code>js</code>
<ul>
<li>组件名：<code>PascalCase</code></li>
<li>属性名：<code>camelCase</code></li>
<li>事件名：<code>kebab-case</code></li>
</ul>
</li>
<li>单文件组件文件名：<code>kebab-case</code></li>
</ul>
<h2 id="react">react</h2>
<h3 id="react-developer-tools-chrome-">react developer tools chrome 插件安装</h3>
<ul>
<li>谷歌浏览器中安装 ctx 格式的插件可能出现‘无法从该网站添加应用，拓展程序或脚本’的报错，此时可以将该文件后缀名修改为 rar 并解压，然后加载解压后的文件夹。</li>
<li>安装好以后，发现页面上提示说当前页面不是 react 应用，后来发现是因为该插件是在页面加载的过程中，创建一个 <code>__REACT_DEVTOOLS_GLOBAL_HOOK__</code> 全局变量来和页面交互的，重新加载就好了。</li>
</ul>
<h3 id="redux-dev-tools-chrome-">redux dev tools chrome 浏览器插件安装</h3>
<p>github: <a href="https://github.com/zalmoxisus/redux-devtools-extension">https://github.com/zalmoxisus/redux-devtools-extension</a>，可直接在上面下载，安装参考 react developer tools 的安装。</p>
<h3 id="api">常用需求解决方案与相应的 api</h3>
<ul>
<li>数据管理
<ul>
<li>redux ，状态管理工具
<ul>
<li>combineReducers</li>
</ul>
</li>
<li>react-redux，通过 mapStateToProps 和 mapDispatchToProps ，使得在组件中使用和修改数据更加方便</li>
<li>immutable.js</li>
<li>redux-immutable</li>
<li>redux-thunk，一个 redux 中间件，使得 store.dispatch() 方法可以接受函数类型的 action，这在异步数据请求时很常用</li>
<li>redux-saga，一个更加复杂的 redux 中间件</li>
</ul>
</li>
<li>给组件添加样式
<ul>
<li>styled-components，可以方便地使用 js 写出带有样式的组件</li>
</ul>
</li>
<li>路由
<ul>
<li>react-router-dom，提供 react 中的路由管理（另外一个包 react-router 更为基础，react-router-dom 是用于浏览器环境下的，引入 react-router-dom 的时候也会引入 react-router）
<ul>
<li>withRouter，使得内部被包裹的组件可以获取到外部 Route 中的参数</li>
</ul>
</li>
</ul>
</li>
<li>轮播图 - react-slick</li>
</ul>
<h3 id="react--github-pages">将 react 项目部署到 github pages</h3>
<ul>
<li>在 package.json 中添加</li>
</ul>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"homepage"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https::/username.github.io/project-name"</span><span class="err">,</span><span class="w">
</span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"predeploy"</span><span class="p">:</span><span class="w"> </span><span class="s2">"npm run build"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"deploy"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gh-pages -d build"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<ul>
<li>安装 gh-pages： <code>npm install --save-dev gh-pages</code></li>
<li>部署： <code>npm run deploy</code></li>
<li>更多参考：<a href="http://bit.ly/CRA-deploy"> http://bit.ly/CRA-deploy</a></li>
</ul>
<h3 id="vscode-">vscode 插件：</h3>
<ul>
<li>ES7 React/Redux/GraphQL/React-Native snippets</li>
<li>vscode-styled-components</li>
</ul>
<h2 id="typescript">typescript</h2>
<h3 id="vscode--typescript-">在 vscode 中自动编译 typescript 文件</h3>
<ul>
<li><code>npm install -g typescript</code>，全局安装 typescript</li>
<li><code>tsc --init</code>， 初始化 <code>tsconfig.json</code> 文件，可以参考<a href="http://www.typescriptlang.org/docs/handbook/tsconfig-json.html">官网</a>根据需要配置</li>
<li>在 vscode 中使用快捷键 <code>Ctrl + Shift + B</code> 运行任务（或任务栏选择 Ternimal &gt; Run build task），然后选择 <code>tsc:watch - tsconfig.json</code>
<ul>
<li>不依赖于 vscode 更通用的方法是直接在命令行使用命令 <code>tsc -w</code>，可在官网查看<a href="http://www.typescriptlang.org/docs/handbook/compiler-options.html">更多编译参数</a></li>
</ul>
</li>
<li>参考：<a href="http://www.cnblogs.com/yanliangnh/p/8366655.html">vscode 下的 typescript 自动编译方法</a></li>
</ul>
<h2 id="vscode">vscode</h2>
<h3 id="vue-">.vue 的格式化</h3>
<p>安装<code>vetur</code>插件</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"vetur.format.defaultFormatter.html"</span><span class="p">:</span><span class="w"> </span><span class="s2">"js-beautify-html"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"vetur.format.defaultFormatterOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"js-beautify-html"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"wrap_attributes"</span><span class="p">:</span><span class="w"> </span><span class="s2">"force-expand-multiline"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"prettyhtml"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"printWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w">
      </span><span class="nl">"singleQuote"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"wrapAttributes"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"sortAttributes"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"prettier"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"singleQuote"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>参考：</p>
<ul>
<li><a href="https://www.jianshu.com/p/23a5d6194a4b">VScode 格式化 ESlint-方法（最全最好用方法！）</a></li>
<li><a href="https://blog.csdn.net/userkang/article/details/84305689">聊一聊 vscode 的代码格式化</a></li>
</ul>
<h3 id="js--jsx-">让 .js 文件关联 jsx 语法模式</h3>
<p>打开 vscode 的配置（<code>ctrl + ,</code>），添加如下的配置；可以将其作为工作空间配置，从而不影响其他项目。</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"files.associations"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"*.js"</span><span class="p">:</span><span class="w"> </span><span class="s2">"javascriptreact"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<h3 id="eslint--prettier-">eslint 和 prettier 插件冲突问题</h3>
<p>例如 prettier 默认在函数定义括号前不插入空格，但是标准的 eslint 要求插入，这时就会报错<code>Missing space before function parenthese</code>一种方案是修改该 prettier 的配置文件 <code>.prettierrc</code> 来符合 eslint 的要求；另一种方案是为将 eslint 扩展是的 prettier 的默认格式合法化，后一种方案可以参考文章：<a href="https://blog.csdn.net/wxl1555/article/details/83032038">Missing space before function parentheses 报错终极解决方案</a></p>
<p>=== 更新 ===</p>
<p>事实上，应该让 prettier 专门用于格式化，而让 eslint 用于代码检验。至于 prettier 格式化后的代码不符合 eslint 标准的问题，可以让 eslint 来进行修复（我个人没有启用自动格式化, 偶尔用 alt + shift + d 格式化文件，这时候在 ctrl + s 保存进行 eslint 修复），为此可以在配置文件（setting.json)中添加如下配置:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"editor.codeActionsOnSave"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"source.fixAll.eslint"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">每次保存的时候将代码按eslint格式进行修复</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="err">```</span><span class="w">

</span><span class="err">参考：</span><span class="w">
</span><span class="err">-</span><span class="w"> </span><span class="p">[</span><span class="err">github</span><span class="w"> </span><span class="err">prettier:</span><span class="w"> </span><span class="err">Linter</span><span class="w"> </span><span class="err">Integration</span><span class="p">]</span><span class="err">(https://github.com/prettier/prettier-vscode#linter-integration)</span><span class="w">


</span><span class="err">##</span><span class="w"> </span><span class="err">electron</span><span class="w">

</span><span class="err">-</span><span class="w"> </span><span class="p">[</span><span class="err">打造你的第一个</span><span class="w"> </span><span class="err">Electron</span><span class="w"> </span><span class="err">应用</span><span class="p">]</span><span class="err">(https://electronjs.org/docs/tutorial/first-app)</span><span class="w">
</span><span class="err">-</span><span class="w"> </span><span class="p">[</span><span class="err">electron</span><span class="w"> </span><span class="err">安装+运行+打包成桌面应用+打包成安装文件+开机自启动</span><span class="p">]</span><span class="err">(http://www.cnblogs.com/kakayang/p/</span><span class="mi">9559777</span><span class="err">.html)</span><span class="w">

</span><span class="err">##</span><span class="w"> </span><span class="err">node</span><span class="w">

</span><span class="p">[</span><span class="err">windows</span><span class="w"> </span><span class="err">下更新</span><span class="w"> </span><span class="err">npm</span><span class="w"> </span><span class="err">和</span><span class="w"> </span><span class="err">node</span><span class="p">]</span><span class="err">(https://www.cnblogs.com/xinjie-just/p/</span><span class="mi">7061619</span><span class="err">.html)</span><span class="w">

</span><span class="err">##</span><span class="w"> </span><span class="err">npm</span><span class="w">

</span><span class="err">###</span><span class="w"> </span><span class="err">peer</span><span class="w"> </span><span class="err">dependency</span><span class="w">

</span><span class="err">-</span><span class="w"> </span><span class="err">我根据`babel`的官方文档执行`npm</span><span class="w"> </span><span class="err">install</span><span class="w"> </span><span class="err">@babel/preset-env</span><span class="w"> </span><span class="err">--save-dev`命令时,出现了`peerDependencies</span><span class="w"> </span><span class="err">WARNING</span><span class="w"> </span><span class="err">@babel/preset-env@*</span><span class="w"> </span><span class="err">requires</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">peer</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">@babel/core@^</span><span class="mf">7.0</span><span class="err">.</span><span class="mi">0-0</span><span class="w"> </span><span class="err">but</span><span class="w"> </span><span class="err">none</span><span class="w"> </span><span class="err">was</span><span class="w"> </span><span class="err">installed`报错。</span><span class="w">
  </span><span class="err">-</span><span class="w"> </span><span class="err">首先解释下`peerDependencies`，这是会发生在如下的情况：A</span><span class="w"> </span><span class="err">依赖于</span><span class="w"> </span><span class="err">B</span><span class="w"> </span><span class="err">和</span><span class="w"> </span><span class="err">C</span><span class="mi">1</span><span class="err">，B</span><span class="w"> </span><span class="err">依赖于</span><span class="w"> </span><span class="err">C</span><span class="mi">2</span><span class="w"> </span><span class="err">的一种插件，C</span><span class="mi">1</span><span class="w"> </span><span class="err">和</span><span class="w"> </span><span class="err">C</span><span class="mi">2</span><span class="w"> </span><span class="err">是同一种包的不同版本，在我的项目中，C</span><span class="mi">1</span><span class="w"> </span><span class="err">直接可见，C</span><span class="mi">2</span><span class="w"> </span><span class="err">并不直接可见，而</span><span class="w"> </span><span class="err">B</span><span class="w"> </span><span class="err">却是依赖于它，因此</span><span class="w"> </span><span class="err">B</span><span class="w"> </span><span class="err">在代码中可能会有类似`require(C)`之类的代码，两者版本不同，那么</span><span class="w"> </span><span class="err">B</span><span class="w"> </span><span class="err">就可能与实际引入的</span><span class="w"> </span><span class="err">C</span><span class="mi">1</span><span class="w"> </span><span class="err">的代码不兼容，为此，B</span><span class="w"> </span><span class="err">可能需要明确指定它的同级依赖（`peerDependencies`）。</span><span class="w">
  </span><span class="err">-</span><span class="w"> </span><span class="err">解决办法：手动安装</span><span class="w">
  </span><span class="err">-</span><span class="w"> </span><span class="err">参考</span><span class="w"> </span><span class="mi">1</span><span class="err">：</span><span class="p">[</span><span class="err">Peer</span><span class="w"> </span><span class="err">Dependencies</span><span class="w"> </span><span class="err">（同版本依赖）</span><span class="p">]</span><span class="err">(https://blog.csdn.net/zhangchao</span><span class="mi">19890805</span><span class="err">/article/details/</span><span class="mi">78988364</span><span class="err">)</span><span class="w">
  </span><span class="err">-</span><span class="w"> </span><span class="err">参考</span><span class="w"> </span><span class="mi">1</span><span class="err">：</span><span class="p">[</span><span class="err">探讨</span><span class="w"> </span><span class="err">npm</span><span class="w"> </span><span class="err">依赖管理之</span><span class="w"> </span><span class="err">peerDependencies</span><span class="p">]</span><span class="err">(https://blog.csdn.net/whc</span><span class="mi">996</span><span class="err">/article/details/</span><span class="mi">82865474</span><span class="err">?utm_source=blogxgwz</span><span class="mi">0</span><span class="err">)</span><span class="w">

</span><span class="err">###</span><span class="w"> </span><span class="err">创建自己的</span><span class="w"> </span><span class="err">npm</span><span class="w"> </span><span class="err">包</span><span class="w">

</span><span class="err">-</span><span class="w"> </span><span class="err">新建一个项目文件夹，进入该文件夹，执行</span><span class="w"> </span><span class="err">`npm</span><span class="w"> </span><span class="err">init</span><span class="w"> </span><span class="err">-y`，将会在该目录下生成一个默认的</span><span class="w"> </span><span class="err">package.json</span><span class="w"> </span><span class="err">文件，这个文件中你可以指定该</span><span class="w"> </span><span class="err">npm</span><span class="w"> </span><span class="err">包的名称和版本，同时使用可以使用语义化的版本号给出你依赖的包及其版本信息；另外还有其他一些信息，你可以手动修改。更多参见</span><span class="p">[</span><span class="err">官网：package.json</span><span class="w"> </span><span class="err">文件创建</span><span class="p">]</span><span class="err">(https://docs.npmjs.com/creating-a-package-json-file)</span><span class="w">
  </span><span class="err">```json</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"package-name"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">必填，不能有空格</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">必填，x.x.x格式</span><span class="w">
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
    </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo </span><span class="se">\"</span><span class="s2">Error: no test specified</span><span class="se">\"</span><span class="s2"> &amp;&amp; exit 1"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"repository"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"git"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://github.com/ashleygwilliams/my_package.git"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">远程仓库</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
    </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Your Name &lt;email@example.com&gt; (http://example.com)"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">邮箱和个人主页都是可选的</span><span class="w">
    </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"bugs"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://github.com/ashleygwilliams/my_package/issues"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">bug提交页</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"homepage"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://github.com/ashleygwilliams/my_package"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">项目主页</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<ul>
<li>创建 <code>index.js</code> 文件，用模块化的方式书写你的代码，如 <code>module.exports = 123;</code></li>
<li>命令行运行 <code>npm login</code>，登录您的 npm 帐号，如果没有请到<a href="https://www.npmjs.com/">官网</a>注册</li>
<li>登录以后，运行 <code>npm publish --access=public</code>，发布你的 npm 包；以后包需要更新的时候，你需要修改 <code>package.json</code> 中的版本号为新版本，否则会报错</li>
<li>到 <code>https://www.npmjs.com/package/包名</code> 查看您的 npm 包，您还可以另外创建项目 <code>npm i 包名</code> 来安装您的包，并测试</li>
<li>您可以在 24 小时内强制删除，<code>npm --force unpublish 包名</code></li>
<li>参考： <a href="https://www.cnblogs.com/marymei0107/p/6339710.html">创建发布自己的 npm 包</a></li>
</ul>
<h2 id="section-10">工具</h2>
<h3 id="charles">charles</h3>
<p>这是一个网页调试代理工具，官网：<a href="https://www.charlesproxy.com">https://www.charlesproxy.com</a>。使用该工具可以在一个本地特定端口与路径的数据请求映射到本地文件，具体方法：</p>
<h4 id="section-11">破解</h4>
<ul>
<li>破解: <a href="https://www.zzzmode.com/mytools/charles/">charles 在线破解工具</a></li>
<li>参考文章: <a href="https://www.cnblogs.com/rrl92/p/7928770.html">charles4.2 下载与破解方法以及配置 https</a></li>
</ul>
<h4 id="section-12">使用</h4>
<ul>
<li>软件菜单栏选择：Tools &gt; Map Local，添加新的映射</li>
<li>填写相关信息：
<ul>
<li>Protocol: 协议</li>
<li>Host: 主机名，本地主机也就是 <code>127.0.0.0.1</code></li>
<li>Port: 端口号，比如我们前端项目启动的服务在 3000 端口，那么我们也就可以将其设置为 3000 端口，也不存在跨域问题</li>
<li>Path: 请求的路径，如 <code>/api/dataList</code></li>
<li>Local Path: 本地文件路径，可以写一个 json 文件，选择其路径</li>
</ul>
</li>
<li>点击 ok 确认，就可以访问本地的模拟数据了（可以先直接在浏览器输入 url 测试一下）</li>
</ul>
<h2 id="jekyll-">jekyll 博客</h2>
<h3 id="jekyll--ip-">jekyll 本地运行无法通过 ip 访问</h3>
<p>使用带参命令运行： <code>jekyll serve -w --host=0.0.0.0:4000</code></p>
<h3 id="section-13">为博客添加流程图支持</h3>
<p>使用 <a href="https://github.com/mermaid-js/mermaid/">mermaid</a>, 可参考文章 <a href="http://kkpattern.github.io/2015/05/15/Embed-Chart-in-Jekyll.html">Embed Mermaid Charts in Jekyll without Plugin</a>, 除了按照文章说的引入 mermaid.min.js 外，还需要引入 mermaid.css 文件，否则显示不正常。</p>
:ET